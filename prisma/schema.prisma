generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id                     String          @id
  username               String          @unique
  avatar                 String?
  cover                  String?
  name                   String?
  surname                String?
  description            String?
  city                   String?
  school                 String?
  work                   String?
  website                String?
  posts                  Post[]
  likes                  Like[]
  comments               Comment[]
  createdAt              DateTime        @default(now())
  followers              Follower[]      @relation("UserFollowers")
  following              Follower[]      @relation("UserFollowing")
  followRequestsSent     FollowRequest[] @relation("FollowRequestsSent")
  followRequestsReceived FollowRequest[] @relation("FollowRequestsReceived")
  blocks                 Block[]         @relation("BlocksSent")
  blockedBy              Block[]         @relation("BlocksReceieved")
  stories                Story[]
}

model Post {
  id        Int       @id @default(autoincrement())
  desc      String
  img       String?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  likes     Like[]
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id          Int      @id @default(autoincrement())
  description String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  likes       Like[]
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int?
  Comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int?
  createdAt DateTime @default(now())
}

model Follower {
  id          Int      @id @default(autoincrement())
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
  createdAt   DateTime @default(now())
}

model FollowRequest {
  id         Int    @id @default(autoincrement())
  sender     User   @relation("FollowRequestsSent", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String
  receiver   User   @relation("FollowRequestsReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String

  createdAt DateTime @default(now())

  @@unique([senderId, receiverId])
}

model Block {
  id        Int      @id @default(autoincrement())
  blocker   User     @relation("BlocksSent", fields: [blockerId], references: [id], onDelete: Cascade)
  blockerId String
  blocked   User     @relation("BlocksReceieved", fields: [blockedId], references: [id], onDelete: Cascade)
  blockedId String
  createdAt DateTime @default(now())

  @@unique([blockerId, blockedId])
}

model Story {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  img       String
  expiresAt DateTime
  createdAt DateTime @default(now())
}
